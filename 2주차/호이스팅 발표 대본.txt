2023_07_21
안녕하세요. 호이스팅에 대해 발표하게 된 발표자. 신주영 입니다.
호이스팅이 무엇인지, 호이스팅 과정에서 var, let, const의 차이점에 대해 발표하도록 하겠습니다.
호이스팅의 사전적 의미는
무엇인가를  올리다, 끌어(감아) 올리다 라는 뜻입니다.
도대체 자바스크립트에서 호이스팅이 무엇일까요?
인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다.
var로 선언한 변수의 경우 호이스팅 시 undefined로 변수를 초기화합니다.
반면 let과 const로 선언한 변수의 경우 호이스팅 시 변수를 초기화하지 않습니다.
"변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 끌어 올리는" 것처럼 보이는 현상 

자바스크립트 엔진은 어떻게 우리가 작성한 코드를 이해하고,
우리의 의도대로 실행해주는 걸까요? 

여기 X랑 Y가 있어, 이거 두개를 더해서 알려줄래? 라고 했을때
어떻게 이해하는 걸까요?

깊게 다루자면 정말 끝도 없는 영역이지만
호이스팅을 이해하기 위해서 필요한 부분들만 간단하게 설명하도록 하겠습니다.

자바스크립트 엔진에게 하나의 코드를 작성해서 주었다고 가정해 봅시다!

사실 콘솔로그도 별도의 실행컨텍스트를 가지지만
설명의 편의상 
콘솔로그와 변수 선언문들을 모두 하나의 실행컨텍스트라고
가정하고 설명하도록 하겟습니다.


우선 자바스크립트 엔진은 이렇게 코드가 주어졌을 때
두가지 동작을 하게 됩니다.
바로 ‘소스코드 평가’와 ‘소스코드 실행’입니다

이는 모두 실행컨텍스트 단위로 진행하게 됩니다.

호이스팅은 특히 코드 평가 과정과 깊은 관련이 있습니다.

코드 평가 과정에서 엔진은 실행컨텍스트를 생성하고
소스 코드 내의 변수나 함수 선언문만 분리해서 먼저 실행하여
그 결과를 평가결과로 실행컨텍스트에 담게 됩니다.

여기서 호이스팅과 관련해서 중요한 포인트는
선언부분만 분리해서 실행한다는 것입니다!!!!

자바스크립트 동작에 대한간단한 그림을 가져 왔습니다.

앞서 말한 것 처럼 코드 평가가 완료되면 엔진은 그 결과를 실행 컴텍스트에 담습니다.

이후 자바스크립트 엔진은
코드를 한줄 한줄 실행하면서

실행컨텍스트에서 그때 그때 필요한 정보들을 꺼내오고 
실행결과를 컨텍스트에 갱신합니다.


var, let, const 각각에 따른 변수 생성의 세가지 단계를 이해하면 
우리가 호이스팅에 대해 가지는 작은 오해를 풀 수 있습니다.

변수는
선언, 
초기화, 
할당 단계를
거처서 생성되게 됩니다.

자바스크립트의 var let const 변수 선언문은 조금씩 성격을 달리하고 있습니다.

var는 함수 생성의 세가지 단계 중
선언과 초기화를 동시에 진행합니다.

이때 초기화라는 것은 undefined를 할당해주는 단계라고 생각하시면 됩니다.

바는  호이스팅 되면서
선언과 초기화가 함께 끌어올려져 이루어 집니다.

반면 let의 경우 선언, 초기화, 할당의 단계가 각각 분리 되어 있습니다.

따라서 호이스팅에 의해 선언만 분리되어 끌어올려진다고 해도 값이 초기화 되지 않습니다,
이렇게 호이스팅에 의해 선언문만 끌어올려지고 나면 초기화가 되어있지 않기 때문에
일시적으로 값을 찾을수 없는 티디지가 생깁니다.

const도 살펴보겠습니다.

const는 선언, 초기화, 할당이 모두 동시에 이루어져야 합니다.
하지만 const도 호이스팅의 대상이기 때문에

개발자가 선언, 초기화, 할당까지 모드 한 라인에서 작성 하였다고 하더라도
엔진에 의해 선언만 분리되어 끌어올려 집니다.

따라서 선언부분 이후 초기화 이전의 일시적으로
값을 참조할수 없는 TDZ를 가지게 됩니다.

우리가 작성한 코드에서는 코드에서는 모두 할당 혹은 초기화및 할당이 이루어지기전에
콘솔로그를 통해 
참조하고자 하기 때문에 에러가 발생합니다.

아직도 콘스트는 호이스팅 되지 않는것 아니냐라고 생각하실 수 있습니다.
그저 단순히 변수를 선언하고, 초기화, 할당하는 라인에 도달하지 않아서 자바스크립트 엔진이 존재를 모른는것 아니냐고 말이죠






